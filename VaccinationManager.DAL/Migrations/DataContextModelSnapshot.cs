// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaccinationManager.DAL;

namespace VaccinationManager.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VaccinationManager.Models.Adresse.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PostalCode")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Adress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Court-Saint-Etienne",
                            District = "BrabantWallon",
                            Number = "2",
                            PostalCode = 1490,
                            Street = "Boucle Joseph Dewez"
                        },
                        new
                        {
                            Id = 2,
                            City = "Charleroi",
                            District = "Hainaut",
                            Number = "-",
                            PostalCode = 6000,
                            Street = "Esplanade du Conseil de l’Europe"
                        },
                        new
                        {
                            Id = 3,
                            City = "Mons",
                            District = "Hainaut",
                            Number = "2",
                            PostalCode = 7000,
                            Street = "Avenue Thomas Edison"
                        },
                        new
                        {
                            Id = 4,
                            City = "Ronquières",
                            District = "Hainaut",
                            Number = "1",
                            PostalCode = 7090,
                            Street = "Rue Rosemont"
                        },
                        new
                        {
                            Id = 5,
                            City = "Tournai",
                            District = "Hainaut",
                            Number = "2",
                            PostalCode = 7500,
                            Street = "Avenue de Gaulle"
                        },
                        new
                        {
                            Id = 6,
                            City = "Grâce-Hollogne",
                            District = "Liège",
                            Number = "1",
                            PostalCode = 4460,
                            Street = "Rue de l’Aéroport"
                        },
                        new
                        {
                            Id = 7,
                            City = "Pepinster",
                            District = "Liège",
                            Number = "1",
                            PostalCode = 4860,
                            Street = "Rue du Paire"
                        },
                        new
                        {
                            Id = 8,
                            City = "Marche-en-Famenne",
                            District = "Luxembourg",
                            Number = "1",
                            PostalCode = 6900,
                            Street = "Rue des Deux Provinces"
                        },
                        new
                        {
                            Id = 9,
                            City = "Namur",
                            District = "Namur",
                            Number = "2",
                            PostalCode = 5000,
                            Street = "Avenue Sergent Vrithoff"
                        });
                });

            modelBuilder.Entity("VaccinationManager.Models.Center.ScheduleCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("CloseHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("ScheduleCenter");
                });

            modelBuilder.Entity("VaccinationManager.Models.Center.VaccinationCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique();

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("VaccinationCenter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdressId = 1,
                            ManagerId = 1,
                            Name = "PAMexpo"
                        },
                        new
                        {
                            Id = 2,
                            AdressId = 2,
                            ManagerId = 1,
                            Name = "CEME"
                        },
                        new
                        {
                            Id = 3,
                            AdressId = 3,
                            ManagerId = 1,
                            Name = "Lotto Mons Expo"
                        },
                        new
                        {
                            Id = 4,
                            AdressId = 4,
                            ManagerId = 1,
                            Name = "Village Vaccination Ronquières"
                        },
                        new
                        {
                            Id = 5,
                            AdressId = 5,
                            ManagerId = 1,
                            Name = "Hall Sportif de Tournai"
                        },
                        new
                        {
                            Id = 6,
                            AdressId = 6,
                            ManagerId = 1,
                            Name = "Bierset - Liège Airport"
                        },
                        new
                        {
                            Id = 7,
                            AdressId = 7,
                            ManagerId = 1,
                            Name = "Centre sportif de Pepinster"
                        },
                        new
                        {
                            Id = 8,
                            AdressId = 8,
                            ManagerId = 1,
                            Name = "WEX"
                        },
                        new
                        {
                            Id = 9,
                            AdressId = 9,
                            ManagerId = 1,
                            Name = "Namur Expo"
                        });
                });

            modelBuilder.Entity("VaccinationManager.Models.InLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InLog");

                    b.HasCheckConstraint("CK_InDate", "InDate>=GetDate()");

                    b.HasCheckConstraint("CK_Quantity", "Quantity>0");
                });

            modelBuilder.Entity("VaccinationManager.Models.Injection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalStaffId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinLotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("VaccinLotId");

                    b.ToTable("Injection");
                });

            modelBuilder.Entity("VaccinationManager.Models.OutLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("VaccinLotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccinLotId");

                    b.ToTable("OutLog");

                    b.HasCheckConstraint("CK_OutDateQuantity", "Quantity >0");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.MedicalStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("InamiCode")
                        .HasMaxLength(11)
                        .HasColumnType("bigint");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("MedicalStaff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InamiCode = 12345678910L,
                            StaffId = 1
                        });
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalIndication")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NationalRegister")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Person");

                    b.HasCheckConstraint("CK_Email", "Email LIKE '_%@_%'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "isabel@mail.be",
                            FirstName = "Isabel",
                            LastName = "Skou",
                            Password = new byte[] { 38, 51, 115, 128, 106, 120, 33, 252, 158, 76, 83, 181, 151, 85, 253, 33, 238, 63, 230, 227, 194, 31, 216, 21, 178, 22, 85, 222, 215, 203, 207, 187 },
                            Salt = "1cf03a94-11f8-491f-9da2-a1a82424cdaa"
                        });
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grade = "Medecin",
                            PersonId = 1
                        });
                });

            modelBuilder.Entity("VaccinationManager.Models.RendezVous.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FifteenHourId")
                        .HasColumnType("int");

                    b.Property<int>("InjectionId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("FifteenHourId");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccinTypeId");

                    b.ToTable("Appointment");

                    b.HasCheckConstraint("CK_Date", "[Date]>= GETDATE()");
                });

            modelBuilder.Entity("VaccinationManager.Models.RendezVous.FifteenHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FifteenHour");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("InLogId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("InLogId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("VaccinTypeId");

                    b.ToTable("VaccinLot");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique();

                    b.ToTable("VaccinProvider");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("VaccinType");
                });

            modelBuilder.Entity("VaccinationManager.Models.Center.ScheduleCenter", b =>
                {
                    b.HasOne("VaccinationManager.Models.Center.VaccinationCenter", "Center")
                        .WithMany("ScheduleCenters")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("VaccinationManager.Models.Center.VaccinationCenter", b =>
                {
                    b.HasOne("VaccinationManager.Models.Adresse.Adress", "Adress")
                        .WithOne("VaccinationCenter")
                        .HasForeignKey("VaccinationManager.Models.Center.VaccinationCenter", "AdressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Person.MedicalStaff", "Manager")
                        .WithOne("VaccinationCenter")
                        .HasForeignKey("VaccinationManager.Models.Center.VaccinationCenter", "ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("VaccinationManager.Models.Injection", b =>
                {
                    b.HasOne("VaccinationManager.Models.RendezVous.Appointment", "Appointment")
                        .WithOne("Injection")
                        .HasForeignKey("VaccinationManager.Models.Injection", "AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Person.MedicalStaff", "MedicalStaff")
                        .WithMany("Injections")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Vaccin.VaccinLot", "VaccinLot")
                        .WithMany("Injections")
                        .HasForeignKey("VaccinLotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("MedicalStaff");

                    b.Navigation("VaccinLot");
                });

            modelBuilder.Entity("VaccinationManager.Models.OutLog", b =>
                {
                    b.HasOne("VaccinationManager.Models.Vaccin.VaccinLot", "VaccinLot")
                        .WithMany("OutLogs")
                        .HasForeignKey("VaccinLotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VaccinLot");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.MedicalStaff", b =>
                {
                    b.HasOne("VaccinationManager.Models.Person.Staff", "Staff")
                        .WithMany("medicalStaffs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Patient", b =>
                {
                    b.HasOne("VaccinationManager.Models.Adresse.Adress", "Adress")
                        .WithOne("Patient")
                        .HasForeignKey("VaccinationManager.Models.Person.Patient", "AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Person.Person", "Person")
                        .WithMany("Patients")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Staff", b =>
                {
                    b.HasOne("VaccinationManager.Models.Person.Person", "Person")
                        .WithMany("Staffs")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VaccinationManager.Models.RendezVous.Appointment", b =>
                {
                    b.HasOne("VaccinationManager.Models.Center.VaccinationCenter", "Center")
                        .WithMany("Appointments")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.RendezVous.FifteenHour", "FifteenHour")
                        .WithMany("Appointments")
                        .HasForeignKey("FifteenHourId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Person.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Vaccin.VaccinType", "VaccinType")
                        .WithMany("Appointments")
                        .HasForeignKey("VaccinTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("FifteenHour");

                    b.Navigation("Patient");

                    b.Navigation("VaccinType");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinLot", b =>
                {
                    b.HasOne("VaccinationManager.Models.Center.VaccinationCenter", "VaccinationCenter")
                        .WithMany("VaccinLots")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.InLog", "InLog")
                        .WithMany("VaccinLots")
                        .HasForeignKey("InLogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Vaccin.VaccinProvider", "VaccinProvider")
                        .WithMany("VaccinLots")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccinationManager.Models.Vaccin.VaccinType", "VaccinType")
                        .WithMany("VaccinLots")
                        .HasForeignKey("VaccinTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InLog");

                    b.Navigation("VaccinationCenter");

                    b.Navigation("VaccinProvider");

                    b.Navigation("VaccinType");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinProvider", b =>
                {
                    b.HasOne("VaccinationManager.Models.Adresse.Adress", "Adress")
                        .WithOne("VaccinProvider")
                        .HasForeignKey("VaccinationManager.Models.Vaccin.VaccinProvider", "AdressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("VaccinationManager.Models.Adresse.Adress", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("VaccinationCenter");

                    b.Navigation("VaccinProvider");
                });

            modelBuilder.Entity("VaccinationManager.Models.Center.VaccinationCenter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ScheduleCenters");

                    b.Navigation("VaccinLots");
                });

            modelBuilder.Entity("VaccinationManager.Models.InLog", b =>
                {
                    b.Navigation("VaccinLots");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.MedicalStaff", b =>
                {
                    b.Navigation("Injections");

                    b.Navigation("VaccinationCenter");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Person", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("VaccinationManager.Models.Person.Staff", b =>
                {
                    b.Navigation("medicalStaffs");
                });

            modelBuilder.Entity("VaccinationManager.Models.RendezVous.Appointment", b =>
                {
                    b.Navigation("Injection");
                });

            modelBuilder.Entity("VaccinationManager.Models.RendezVous.FifteenHour", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinLot", b =>
                {
                    b.Navigation("Injections");

                    b.Navigation("OutLogs");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinProvider", b =>
                {
                    b.Navigation("VaccinLots");
                });

            modelBuilder.Entity("VaccinationManager.Models.Vaccin.VaccinType", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("VaccinLots");
                });
#pragma warning restore 612, 618
        }
    }
}
